trigger:
  branches:
    include: ['personal/brpoll/yaml-build']
variables:
    ConnectedServiceName: 'Microsoft Health Open Source Subscription'
    resourceGroupRoot: 'msh-fhir-pr'
    prNumber: '11'
    DeploymentEnvironmentName: '$(resourceGroupRoot)-$(prNumber)'
    DeploymentEnvironmentNameR4: '$(DeploymentEnvironmentName)-r4'
    DeploymentEnvironmentNameSql: '$(DeploymentEnvironmentName)-sql'
    DeploymentEnvironmentNameR4Sql: '$(DeploymentEnvironmentName)-r4-sql'
stages:
- stage: BuildUnitTests
  dependsOn: []
  displayName: 'Build and unit tests'
  variables:
    buildConfiguration: 'Release'
    name: pr$(system.pullRequest.pullRequestNumber)-$(Date:yyyyMMdd)$(Rev:-r)
  jobs:
  - job: Windows
    pool:
      vmImage: 'vs2017-win2016'
    steps:
    - template: build.yml
  - job: Linux
    pool:
      vmImage: 'ubuntu-16.04'
    steps:
    - template: build.yml
      parameters:
        packageArtifacts: false

- stage: provisionEnvironment
  displayName: 'Provision Azure Environment'
  dependsOn: []
  variables:
    AppServicePlanName: 'msh-fhir-pr-southcentralus'
    ResourceGroupRegion: 'South Central US'
    TestEnvironmentUrl: 'https://$(DeploymentEnvironmentName).azurewebsites.net'
  jobs:
  - job: deploy
    pool:
      vmImage: 'vs2017-win2016'
    steps:
    - task: AzureKeyVault@1
      displayName: 'Azure Key Vault: resolute-oss-tenant-info'
      inputs:
        azureSubscription: 'Microsoft Health Open Source Subscription'
        KeyVaultName: 'resolute-oss-tenant-info'
    - task: AzurePowerShell@3
      displayName: 'Deploy ARM template & Setup AAD environment'
      inputs:
        azureSubscription: 'Microsoft Health Open Source Subscription'
        ScriptType: InlineScript
        Inline: |
          Add-Type -AssemblyName System.Web
          Install-Module AzureAD -Force

          New-AzureRmResourceGroup -Name "$(DeploymentEnvironmentName)" -Location "$(ResourceGroupRegion)" -Force

          $roles = (ConvertFrom-Json (Get-Content -Raw "$(System.DefaultWorkingDirectory)/testauthenvironment.json")).roles
          $flattenedRoles = $(System.DefaultWorkingDirectory)/release/scripts/PowerShell/ConvertTo-FlattenedConfigurationHashtable.ps1 -InputObject $roles -PathPrefix "FhirServer:Security:Authorization:Roles"

          $cors = (ConvertFrom-Json (Get-Content -Raw "$(System.DefaultWorkingDirectory)/test/Configuration/corstestconfiguration.json"))
          $flattenedCors = $(System.DefaultWorkingDirectory)/release/scripts/PowerShell/ConvertTo-FlattenedConfigurationHashtable.ps1 -InputObject $cors

          $export= (ConvertFrom-Json (Get-Content -Raw "$(System.DefaultWorkingDirectory)/test/Configuration/exporttestconfiguration.json"))
          $flattenedExport = $(System.DefaultWorkingDirectory)/release/scripts/PowerShell/ConvertTo-FlattenedConfigurationHashtable.ps1 -InputObject $export

          $additionalProperties = $flattenedRoles + $flattenedCors + $flattenedExport

          $additionalProperties["SqlServer:DeleteAllDataOnStartup"] = "true"

          $templateParameters = @{
            appServicePlanResourceGroup = "$(resourceGroupRoot)"
            appServicePlanName = "$(AppServicePlanName)"
            serviceName = "$(DeploymentEnvironmentName)"
            securityAuthenticationAuthority = "https://login.microsoftonline.com/$(tenant-id)"
            repositoryUrl = ""
            securityAuthenticationAudience = "$(TestEnvironmentUrl)"
            additionalFhirServerConfigProperties = $additionalProperties
            enableAadSmartOnFhirProxy = $true
          }

          # Deploy CosmosDb environment
          New-AzureRmResourceGroupDeployment -ResourceGroupName "$(DeploymentEnvironmentName)" -TemplateFile $(System.DefaultWorkingDirectory)/samples/templates/default-azuredeploy.json -TemplateParameterObject $templateParameters -Verbose
          Set-AzureRmKeyVaultAccessPolicy -VaultName "$(DeploymentEnvironmentName)" -ObjectId 4d4d503d-9ca8-462e-9e18-b35fc8b5285b -PermissionsToSecrets list,get

          # Deploy R4 CosmosDb environment
          $templateParameters["serviceName"] = "$(DeploymentEnvironmentNameR4)"
          New-AzureRmResourceGroupDeployment -ResourceGroupName "$(DeploymentEnvironmentName)" -TemplateFile $(System.DefaultWorkingDirectory)/samples/templates/default-azuredeploy.json -TemplateParameterObject $templateParameters -Verbose

          # Setup SQL specific variables
          $sap = [System.Web.Security.Membership]::GeneratePassword(15, 5).replace(";", "_").replace("$","!")
          Write-Host "##vso[task.setvariable variable=SqlAdminPassword]$sap"
          $templateParameters["solutionType"] = "FhirServerSqlServer"
          $templateParameters["sqlAdminPassword"] = $sap

          # Deploy STU3 SqlServer
          $templateParameters["serviceName"] = "$(DeploymentEnvironmentNameSql)"
          New-AzureRmResourceGroupDeployment -ResourceGroupName "$(DeploymentEnvironmentName)" -TemplateFile $(System.DefaultWorkingDirectory)/samples/templates/default-azuredeploy-sql.json -TemplateParameterObject $templateParameters -Verbose
          Set-AzureRmKeyVaultAccessPolicy -VaultName "$(DeploymentEnvironmentNameSql)" -ObjectId 4d4d503d-9ca8-462e-9e18-b35fc8b5285b -PermissionsToSecrets list,get

          # Deploy R4 SqlServer
          $templateParameters["serviceName"] = "$(DeploymentEnvironmentNameR4Sql)"
          New-AzureRmResourceGroupDeployment -ResourceGroupName "$(DeploymentEnvironmentName)" -TemplateFile $(System.DefaultWorkingDirectory)/samples/templates/default-azuredeploy-sql.json -TemplateParameterObject $templateParameters -Verbose
        azurePowerShellVersion: LatestVersion


- stage: deployStu3
  displayName: 'Deploy STU3 Site'
  variables:
    WebAppName: '$(DeploymentEnvironmentName)'
  dependsOn:
  - provisionEnvironment
  - BuildUnitTests
  jobs:
  - job: 'deploy'
    steps:
    - checkout: none
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        downloadPath: '$(System.ArtifactsDirectory)'
        artifactName: 'deploy'
    - task: AzureRmWebAppDeployment@3
      displayName: 'Azure App Service Deploy'
      inputs:
        azureSubscription: '$(ConnectedServiceName)'
        appType: 'app'
        WebAppName: '$(WebAppName)'
        Package: '$(Build.ArtifactStagingDirectory)/deploy/*Stu3*.zip'
        TakeAppOfflineFlag: true


- stage: deployStu3Sql
  displayName: 'Deploy STU3 SQL Site'
  variables:
    WebAppName: '$(DeploymentEnvironmentNameSql)'
  dependsOn:
  - provisionEnvironment
  - BuildUnitTests
  jobs:
  - job: 'deploy'
    steps:
    - checkout: none
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        downloadPath: '$(System.ArtifactsDirectory)'
        artifactName: 'deploy'
    - task: AzureRmWebAppDeployment@3
      displayName: 'Azure App Service Deploy'
      inputs:
        azureSubscription: '$(ConnectedServiceName)'
        appType: 'app'
        WebAppName: '$(WebAppName)'
        Package: '$(Build.ArtifactStagingDirectory)/deploy/*Stu3*.zip'
        TakeAppOfflineFlag: true


- stage: deployR4
  displayName: 'Deploy R4 Site'
  variables:
    WebAppName: '$(DeploymentEnvironmentNameR4)'
  dependsOn:
  - provisionEnvironment
  - BuildUnitTests
  jobs:
  - job: 'deploy'
    steps:
    - checkout: none
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        downloadPath: '$(System.ArtifactsDirectory)'
        artifactName: 'deploy'
    - task: AzureRmWebAppDeployment@3
      displayName: 'Azure App Service Deploy'
      inputs:
        azureSubscription: '$(ConnectedServiceName)'
        appType: 'app'
        WebAppName: '$(WebAppName)'
        Package: '$(Build.ArtifactStagingDirectory)/deploy/*R4*.zip'
        TakeAppOfflineFlag: true


- stage: deployR4Sql
  displayName: 'Deploy R4 SQL Site'
  variables:
    WebAppName: '$(DeploymentEnvironmentNameR4Sql)'
  dependsOn:
  - provisionEnvironment
  - BuildUnitTests
  jobs:
  - job: 'deploy'
    steps:
    - checkout: none
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        downloadPath: '$(System.ArtifactsDirectory)'
        artifactName: 'deploy'
    - task: AzureRmWebAppDeployment@3
      displayName: 'Azure App Service Deploy'
      inputs:
        azureSubscription: '$(ConnectedServiceName)'
        appType: 'app'
        WebAppName: '$(WebAppName)'
        Package: '$(Build.ArtifactStagingDirectory)/deploy/*R4*.zip'
        TakeAppOfflineFlag: true


- stage: integrationTest
  displayName: 'Run Integration and E2E Tests'
  dependsOn:
  - deployStu3
  - deployStu3Sql
  - deployR4
  - deployR4Sql
  variables:
    TestEnvironmentUrl: 'https://$(DeploymentEnvironmentName).azurewebsites.net'
    TestEnvironmentUrl_Sql: 'https://$(DeploymentEnvironmentNameSql).azurewebsites.net'
    TestEnvironmentUrl_R4: 'https://$(DeploymentEnvironmentNameR4).azurewebsites.net'
    TestEnvironmentUrl_R4_Sql: 'https://$(DeploymentEnvironmentNameR4Sql).azurewebsites.net'
    TestEnvironmentName: 'OSS PR$(prNumber)'
    Resource: '$(TestEnvironmentUrl)'

  jobs:
  - job: "integrationTests"
    pool:
      vmImage: 'vs2017-win2016'
    steps:
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        downloadPath: '$(System.ArtifactsDirectory)'
        artifactName: 'IntegrationTests'

    - task: DotNetCoreInstaller@0
      inputs:
        version: '2.2.103' 

    - task: AzureKeyVault@1
      displayName: 'Azure Key Vault: $(DeploymentEnvironmentName)'
      inputs:
        azureSubscription: 'Microsoft Health Open Source Subscription'
        KeyVaultName: '$(DeploymentEnvironmentName)'

    - task: AzureKeyVault@1
      displayName: 'Azure Key Vault: $(DeploymentEnvironmentNameSql)'
      inputs:
        azureSubscription: 'Microsoft Health Open Source Subscription'
        KeyVaultName: $(DeploymentEnvironmentNameSql)
    - task: VSTest@2
      displayName: 'Run Integration Tests'
      inputs:
        testSelector: testAssemblies
        testAssemblyVer2: |
          **\*Tests.Integration*.dll
        searchFolder: '$(System.ArtifactsDirectory)'
      env:
        'CosmosDb:Host': $(CosmosDb--Host)
        'CosmosDb:Key': $(CosmosDb--Key)
        'SqlServer:ConnectionString': $(SqlServer--ConnectionString)


  - job: 'e2eTests'
    pool:
      vmImage: 'vs2017-win2016'
    steps:
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        downloadPath: '$(System.ArtifactsDirectory)'
        artifactName: 'IntegrationTests'
    - task: DotNetCoreInstaller@0
      inputs:
        version: '2.2.103' 
        
    - task: AzureKeyVault@1
      displayName: 'Azure Key Vault: resolute-oss-tenant-info'
      inputs:
        azureSubscription: 'Microsoft Health Open Source Subscription'
        KeyVaultName: 'resolute-oss-tenant-info'
    
    - task: AzurePowerShell@3
      displayName: 'Set Variables'
      inputs:
        azureSubscription: 'Microsoft Health Open Source Subscription'
        ScriptType: InlineScript
        preferredAzurePowerShellVersion: 5.1.1
        Inline: |
          Install-Module AzureAD -Force
          dotnet dev-certs https
          dotnet dev-certs https --trust

          # Get admin token
          $tenantId = "$(tenant-id)"
          $username = "$(tenant-admin-user-name)"
          $password_raw = "$(tenant-admin-user-password)"
          $password =  ConvertTo-SecureString -AsPlainText $password_raw -Force
          $adminCredential = New-Object PSCredential $username,$password

          $adTokenUrl = "https://login.microsoftonline.com/$tenantId/oauth2/token"
          $resource = "https://graph.windows.net/"

          $body = @{
              grant_type = "password"
              username   = $username
              password   = $password_raw
              resource   = $resource
              client_id  = "1950a258-227b-4e31-a9cf-717495945fc2" # Microsoft Azure PowerShell
          }

          $response = Invoke-RestMethod -Method 'Post' -Uri $adTokenUrl -ContentType "application/x-www-form-urlencoded" -Body $body
          $token = $response.access_token

          Connect-AzureAD -TenantId $tenantId -AadAccessToken $response.access_token -AccountId $username

          Import-Module $(System.DefaultWorkingDirectory)/samples/scripts/PowerShell/FhirServer/FhirServer.psd1
          Import-Module $(System.DefaultWorkingDirectory)/release/scripts/PowerShell/FhirServerRelease/FhirServerRelease.psd1

          $output = Add-AadTestAuthEnvironment -TestAuthEnvironmentPath $(System.DefaultWorkingDirectory)/testauthenvironment.json -EnvironmentName $(DeploymentEnvironmentName) -TenantAdminCredential $adminCredential

          foreach($user in $output.environmentUsers)
          {
              Write-Host "Retrieving '$($user.environmentId)-password' from  '$(DeploymentEnvironmentName)-ts'"

              $secret = Get-AzureKeyVaultSecret -VaultName $(DeploymentEnvironmentName)-ts -Name "$($user.environmentId)-password"
              Write-Host "##vso[task.setvariable variable=user_$($user.Id)_id]$($user.upn)"
              Write-Host "##vso[task.setvariable variable=user_$($user.Id)_secret]$($secret.SecretValueText)"
          }

          foreach($clientApp in $output.environmentClientApplications)
          {
              Write-Host "Retrieving '$($clientApp.displayName)-secret' from '$(DeploymentEnvironmentName)-ts'"
              $secret = Get-AzureKeyVaultSecret -VaultName $(DeploymentEnvironmentName)-ts -Name "$($clientApp.displayName)-secret"

              Write-Host "##vso[task.setvariable variable=app_$($clientApp.Id)_id]$($clientApp.AppId)"
              Write-Host "##vso[task.setvariable variable=app_$($clientApp.Id)_secret]$($secret.SecretValueText)"
              Write-Host "##vso[task.setvariable variable=TestClientSecret]$($secret.SecretValueText)"
          }

    - task: VSTest@2
      displayName: 'Run E2E Tests'
      inputs:
        testSelector: testAssemblies
        testAssemblyVer2: |
          **\*Tests.E2E*.dll
        searchFolder: '$(System.ArtifactsDirectory)'


- stage: cleanup
  displayName: 'Cleanup Azure Environment'
  dependsOn:
  - integrationTest
  jobs:
    - job: DeleteResourceGroup
      displayName: 'Delete resource group'
      pool:
        vmImage: 'vs2017-win2016'
      steps:
      - task: AzurePowerShell@3
        displayName: 'Delete resource group'
        inputs:
          azureSubscription: 'Microsoft Health Open Source Subscription'
          ScriptType: InlineScript
          Inline: 'Get-AzureRmResourceGroup -Name $(DeploymentEnvironmentName) | Remove-AzureRmResourceGroup -Verbose -Force'
          preferredAzurePowerShellVersion: 5.1.1
    - job: cleanupAad
      displayName: 'Cleanup Azure Active Directory'
      pool:
        vmImage: 'vs2017-win2016' 
      steps:
      - task: DownloadBuildArtifacts@0
        inputs:
          buildType: 'current'
          downloadType: 'single'
          downloadPath: '$(System.ArtifactsDirectory)'
          artifactName: 'deploy'
      - task: AzureKeyVault@1
        displayName: 'Azure Key Vault: resolute-oss-tenant-info'
        inputs:
          azureSubscription: 'Microsoft Health Open Source Subscription'
          KeyVaultName: 'resolute-oss-tenant-info'
      - task: AzurePowerShell@3
        inputs:
          azureSubscription: 'Microsoft Health Open Source Subscription'
          ScriptType: InlineScript
          Inline: |
            $clientId = "$(tenant-admin-service-principal-name)"
            $clientSecret = "$(tenant-admin-service-principal-password)"
            $tenantId = "$(tenant-id)"

            $adTokenUrl = "https://login.microsoftonline.com/$tenantId/oauth2/token"
            $resource = "https://graph.windows.net/"

            $body = @{
                grant_type    = "client_credentials"
                client_id     = $clientId
                client_secret = $clientSecret
                resource      = $resource
            }

            $response = Invoke-RestMethod -Method 'Post' -Uri $adTokenUrl -ContentType "application/x-www-form-urlencoded" -Body $body
            $token = $response.access_token

            Connect-AzureAD -TenantId $tenantId -AadAccessToken $response.access_token -AccountId $clientId

            Import-Module $(System.DefaultWorkingDirectory)/samples/scripts/PowerShell/FhirServer/FhirServer.psd1
            Import-Module $(System.DefaultWorkingDirectory)/release/scripts/PowerShell/FhirServerRelease/FhirServerRelease.psd1

            Remove-AadTestAuthEnvironment -TestAuthEnvironmentPath $(System.DefaultWorkingDirectory)/testauthenvironment.json -EnvironmentName $(DeploymentEnvironmentName)
        displayName: 'Delete AAD apps'
